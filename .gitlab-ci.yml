image: docker:latest
services:
  - name: docker:dind
    alias: staticapp    

stages:
  - Build
  - Test acceptation
  - Release image
  - Deploy review 
  - Stop review 

#before_script:
#  - docker info

docker-build:
  stage: Build
  tags:
    - carlinfg
  script:
    - docker build --pull -t staticapp .
    - docker save staticapp > staticapp.tar
  artifacts:
    paths:
      - staticapp.tar #sauvergarde de rendu du build sour forme d'artifact

test-acceptation:
  stage: Test acceptation
  script:
    #- docker info  # Vérifiez si le démon Docker est disponible
    #- docker rmi -f staticapp 2>/dev/null || echo "Image déjà supprimée" 
    - docker load < staticapp.tar
    #- docker rm -vf staticapp-test 2>/dev/null || echo "Conteneur déjà nettoyé"
    #- docker run -d -p 80:80 -e PORT=80 --name staticapp-test1 staticapp
    - docker run --rm -d -p 80:80 --name staticapp-test staticapp:latest
    - sleep 5
    #- docker ps
    - apk --no-cache add curl
    - ip_address=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' staticapp-test)
    - echo "Adresse IP du conteneur  $ip_address"
    - curl "http://staticapp" | grep -i "DIMENSION"
    - docker rm -vf staticapp-test && echo "clean container"
  tags:
    - carlinfg


release-image:
  stage: Release image
  tags:
    - carlinfg
  script: 
    - docker load < staticapp.tar
    #ajout des variable d'environnement permettant de tagger la release
    - docker tag staticapp "${IMAGE_NAME}:${CI_COMMIT_REF_NAME}"
    - docker tag staticapp "${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}"
    #configuration de login au registry gitlab
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker push "${IMAGE_NAME}:${CI_COMMIT_REF_NAME}"
    - docker push "${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}"


deploy-review:
  stage: Deploy review
  tags:
    - carlinfg
  only:
    - merge_requests
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: ${REVIEW_LINK}
    on_stop: stop-review
  script:
    - apk --no-cache add npm
    - npm install -g heroku
    - heroku container:login
    - APP_NAME=staticapp-$CI_COMMIT_REF_NAME
    - "[[ ${#APP_NAME} -gt 31 ]] && echo 'the name of the heroku application you want to create is longer than 30 characters' && exit 1"
    - heroku create $APP_NAME || echo "project already exist"
    - heroku container:push -a $APP_NAME web
    - heroku container:release -a $APP_NAME web
   
stop-review:
  stage: Stop review
  tags:
    - carlinfg
  variables:
    GIT_STRATEGY: none
  only:
    - merge_requests
  when: manual
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop #ajout de l'action stop pour la supp de l'environnement review
  script:
    - apk --no-cache add npm
    - npm install -g heroku
    - heroku container:login
    - heroku apps:destroy -a staticapp-$CI_COMMIT_REF_NAME --confirm staticapp-$CI_COMMIT_REF_NAME