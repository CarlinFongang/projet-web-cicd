image: docker:latest
services:
  - name: docker:dind
    alias: static-webapp

stages:
  - Build
  - Test acceptation
  - Release image
  - Deploy review 
  - Stop review 
  - Deploy staging
  - Test staging
  - Deploy production
  - Test production


variables:
  SERVER_USER: ubuntu
  SERVER_IP: 34.234.93.228 #Public IP address EC2 on AWS

.test_template: &test
  image: alpine
  only:
   - main
  script:
   - apk --no-cache add curl
   - curl "http://$DOMAIN" | grep -i "dimension"

docker-build:
  stage: Build
  script:
    - docker build --pull -t staticapp .
    - docker save staticapp > staticapp.tar
  artifacts:
    paths:
      - staticapp.tar


test-acceptation:
  stage: Test acceptation
  script:
    - docker rmi -f staticapp >/dev/null 2>&1 && echo "Image précédente supprimé." || echo "Aucune image du même nom n'exite."
    - docker load < staticapp.tar
    - docker rm -f staticapp-test >/dev/null 2>&1 && echo "Conteneur précédent supprimé." || echo "Aucun conteneur du même nom n'exite."
    - docker run --rm -d -p 80:80 --name staticapp-test staticapp:latest
    - sleep 5
    - apk --no-cache add curl
    - ip_address=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' staticapp-test)
    - curl -I "http://static-webapp"
    - echo "Adresse IP du conteneur  $ip_address"
    - docker rm -vf staticapp-test && echo "clean container"

release-image:
  stage: Release image
  script: 
    - docker load < staticapp.tar
    - docker tag staticapp "${IMAGE_NAME}:${CI_COMMIT_REF_NAME}"
    - docker tag staticapp "${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}"
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker push "${IMAGE_NAME}:${CI_COMMIT_REF_NAME}"
    - docker push "${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}"


deploy-review: #Review performed on a Heroku Dyno service
  stage: Deploy review
  #only:
  #  - merge_requests
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: ${REVIEW_LINK}
    #on_stop: stop-review
  script:
    - apk --no-cache add npm
    - npm install -g heroku
    - heroku container:login
    - APP_NAME=staticapp-$CI_COMMIT_REF_NAME
    - "[[ ${#APP_NAME} -gt 31 ]] && echo 'the name of the heroku application you want to create is longer than 30 characters' && exit 1"
    - heroku create $APP_NAME || echo "project already exist"
    - heroku container:push -a $APP_NAME web
    - heroku container:release -a $APP_NAME web

.stop-review:
  stage: Stop review
  variables:
    GIT_STRATEGY: none
  only:
    - merge_requests
  when: manual
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop #Adding the stop action for removing the review environment
  script:
    - apk --no-cache add npm
    - npm install -g heroku
    - heroku container:login
    - heroku apps:destroy -a staticapp-$CI_COMMIT_REF_NAME --confirm staticapp-$CI_COMMIT_REF_NAME

deploy-staging: #Deployment carried out on an AWS EC2 instance
  image: alpine:latest
  stage: Deploy staging
  script:
    - chmod og= $ID_RSA
    - apk update && apk add openssh-client
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker pull ${IMAGE_NAME}:${CI_COMMIT_REF_NAME}"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker container rm -f static-webapp || true"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker run --rm -d -p 344:80 --name static-webapp ${IMAGE_NAME}:${CI_COMMIT_REF_NAME}"
  environment:
    name: staging
    url: http://$SERVER_IP
  only:
    - main

test-staging:
  <<: *test
  stage: Test staging
  variables:
    DOMAIN: $SERVER_IP:344

deploy-production: #Deployment carried out on an AWS EC2 instance
  image: alpine:latest
  stage: Deploy production
  script:
    - chmod og= $ID_RSA
    - apk update && apk add openssh-client
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker pull ${IMAGE_NAME}:${CI_COMMIT_REF_NAME}"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker container rm -f webapp-prod || true"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker run --rm -d -p 80:80 --name webapp-prod ${IMAGE_NAME}:${CI_COMMIT_REF_NAME}"
  environment:
    name: production
    url: http://$SERVER_IP
  only:
    - main

test production:
  <<: *test
  stage: Test production
  variables:
    DOMAIN: $SERVER_IP